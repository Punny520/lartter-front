现在完成登录按钮的逻辑，要求是点击登录按钮后登录的界面从右边滑动出来，覆盖右侧。
如果可以的话为了不让Main.vue太过复杂，你可以另外创建一个Login.vue的组件代表登录界面

修改Login.vue的位置，要求和Main.vue类似位于中间部分，同时左上角的退出按钮设计成左箭头

所有请求都是要通过网关访问，我要如何设计以便于以后的开发以及网关地址的切换？

现在我只有本地的测试环境，网关地址是localhost:8080，我想要你帮我设计一套的请求相关内容以便后续的使用。

修改登录界面的登录逻辑：
首先登录有两大类方式：密码登录，和验证码登录
如果是密码，则是两个输入框，可以输入邮箱、手机号或者账号，然后是密码
如果是手机验证码登录则是要输入手机号或者邮箱，同时还有一个验证码框和按钮用于获取验证码
先完成对应的样式即可无需考虑逻辑

分别给输入框设置下拉选项，以区分手机、账号和邮箱

接着加上登录逻辑：
如果是密码登录，需要附上LoginType
如果是验证码登录需要附上LoginType和VerifyCodeType
账号就是account、手机就是phone邮箱就是email验证码就是verifycCode
请求连接是/account/login，如果登录成功返回的code就是1，msg是success，data里面是token，现在要求登录成功后显示提示登入成功token:xxx

现在需要创建一个主页Home.vue用于登录过后跳转，
暂时不需要设计布局和样式，只需要显示，登陆成功：token
如果在Main.vue检测到Token，那么就不需要跳转，直接跳转登录页面
并且给Home.vue添加一个登出按钮，请求路径为/account/logout方式为get

现在要完成验证码按钮的逻辑，在用户输入手机号或者邮箱后，点击获取验证码按钮
会发送post请求到/account/get_verify_code，请求体为：
{
    "phone": "18888888888",
    "verifyCodeType": "PHONE"
}
响应体为：
{
	"code": "1",
	"msg": "success",
	"data": null
}
1表示验证码已发送，-1验证码获取失败，并且按钮变灰倒计时60s后才能按

完成验证码登录逻辑
请求连接还是/account/login请求方式是post
请求体示例：
{
    "phone":"18888888888",
    "verifyCode":"1234",
    "loginType":"PHONE_VERIFY_CODE"，
    "verifyCodeType":"PHONE"
}
这里面的逻辑是如果登录，则需要带上对应的登录类型
如果有验证码则需要带上对应的验证码类型。
响应体
{
	"code": "1",
	"msg": "success",
	"data": "302cf833-254e-4b74-a161-3770bde41ba5"
}

接下来，修改注册界面，首先是post方法
请求链接是/account/register
请求体示例为：
{
    "account": "pppp",
    "password": "punny1234",
    "phone": "18888888888",
    "registerType": "PHONE_VERIFY_CODE",
    "verifyCode": "2562",
    "verifyCodeType": "PHONE"
}
注册必须用手机或者邮箱验证码，可以用下拉框选择是手机还是邮箱
验证码按钮以及逻辑和登录界面类似

现在需要你完成推文卡片的部分，你需要写一个组件叫Post.vue，用来展示一个推文，风格类似twitter
这个组件可以根据推文的id来获取一个推文并且展示。一般情况是Home.vue先发送请求获取一个推文的id列表，
然后遍历这个列表渲染出每一个Post.vue所以Post.vue需要像函数一样能够接收一个postId
接着Post.vue发送get请求/post/get/{postId}，然后后端会返回一个推文的信息：
{
	"code": "1",
	"msg": "success",
	"data": {
		"type": 0,
		"postNormDto": {
			"id": 1890406142111121408,
			"text": "大家好，我叫punny今天刚刚注册lartter",
			"url1": "http://117.72.69.101:9000/lartter-oss/2025-02-14-22-22-00-h31ZQn.JPG",
			"file1": null,
			"url2": null,
			"file2": null,
			"url3": null,
			"file3": null,
			"url4": null,
			"file4": null,
			"likeCount": 0,
			"commentCount": 0,
			"repostCount": 0,
			"createBy": 1884990918671466496,
			"createTime": "2025-02-14T22:22:01",
			"updateTime": "2025-02-14T22:22:01",
			"liked": false
		},
		"postRepostDto": null,
		"postQuoteDto": null,
		"postReplyDto": null
	}
}
首先data里面保存了一个推文的全部信息，type表示推文的类型
POST_TYPE_NORM = 0; //普通推文
POST_TYPE_REPOST = 1; //转发推文
POST_TYPE_QUOTE = 2; //引用推文
POST_TYPE_REPLY = 3; //回复推文
我来一个一个介绍这些推文
首先是普通推文，对应的是postNormDto
这是后端对应的实体类
 /**
     * id
     */
    private Long id;

    /**
     * 文本
     */
    private String text;

    /**
     * url1
     */
    private String url1;
    private MultipartFile file1;

    /**
     * url2
     */
    private String url2;
    private MultipartFile file2;

    /**
     * url3
     */
    private String url3;
    private MultipartFile file3;

    /**
     * url4
     */
    private String url4;
    private MultipartFile file4;

    /**
     * 点赞数量
     */
    private Long likeCount;

    /**
     * 评论数量
     */
    private Long commentCount;

    /**
     * 转发数量
     */
    private Long repostCount;

    /**
     * 创建人
     */
    private Long createBy;

    /**
     * 创建时间
     */
    private LocalDateTime createTime;

    /**
     * 更新时间
     */
    private LocalDateTime updateTime;

    /**
     * 用户是否点赞
     */
    private Boolean liked;
需要展示的有，文字描述、媒体文件(图片或者视频)
点赞数量、评论数量、转发数量
是否点赞表示用户是否点赞该推文，也需要渲染就是是红色爱心还是不是红色
创建时间
对于媒体文件，需要根据文件的数量就行不同的排布，媒体文件最多4个最少0个

现在需要你完成PostNorm.vue的逻辑部分，在拿到从父组件（比如Demo.vue）传来的postId后
需要向后端发送获取推文信息的请求请求方式是get，比如/post/get/1890406142111121408
发送请求可以根据现成提供的写，反正统一请求同一个网关，目前是localhost:8080
后端响应类似这种
{
	"code": "1",
	"msg": "success",
	"data": {
		"type": 0,
		"postNormDto": {
			"id": 1890406142111121408,
			"text": "大家好，我叫punny今天刚刚注册lartter",
			"url1": "http://117.72.69.101:9000/lartter-oss/2025-02-14-22-22-00-h31ZQn.JPG",
			"file1": null,
			"url2": null,
			"file2": null,
			"url3": null,
			"file3": null,
			"url4": null,
			"file4": null,
			"likeCount": 0,
			"commentCount": 0,
			"repostCount": 0,
			"createBy": 1884990918671466496,
			"avatarUrl": null,
			"nickName": null,
			"createTime": "2025-02-14T22:22:01",
			"updateTime": "2025-02-14T22:22:01",
			"liked": false
		},
		"postRepostDto": null,
		"postQuoteDto": null,
		"postReplyDto": null
	}
}
data里面是一个聚合的post，由于该组件是PostNorm,所以每次拿到的数据只有postNormDto，不用关心其他的。
然后dto中有4个url，分别表示4张图片，如果为null或者空则表示没有，按非空的url数量渲染图片即可。
写完后可以用这个id测试1890406142111121408，重新写一个测试组件PostNormTest.vue，有一个输入框
可以填入推文id点击查询后发送请求渲染出一个推文。
你可能注意到里面有用户的头像和昵称，这个先不用管,只需要渲染推文部分即可

接着给PostNorm.vue添加用户头像和用户的昵称
逻辑是首先获取了推文信息后里面会有一个createBy这个就是这条推文的用户id
你需要再次向后端发送一个get请求去获取用户的信息
请求路径为/my/info/show/{id}
后端响应示例为
{
	"code": "1",
	"msg": "success",
	"data": {
		"id": 1884990922446340096,
		"accountId": 1884990918671466496,
		"nickname": "punny123",
		"avatarUrl": "http://117.72.69.101:9000/lartter-oss/2025-01-31-22-04-47-bXrvqY.JPG",
		"backgroundUrl": "http://117.72.69.101:9000/lartter-oss/2025-01-31-22-04-47-stmuQ9.png",
		"bio": "lartter新人请多关照",
		"createTime": "2025-01-30T23:43:52",
		"updateTime": "2025-01-31T22:04:48",
		"avatar": null,
		"background": null
	}
}
你只需要根据头像url显示头像和昵称即可

接着完成转发推文的组件，PostRePost.vue
转发推文组件用于展示转发类型的推文
由转发人的昵称+被转发的推文组件组成
首先还是通过父组件传入一个推文id
然后PostRePost.vue发送get请求/post/get/{postId}来获取转发类型推文的信息
后端的响应示例为：
{
	"code": "1",
	"msg": "success",
	"data": {
		"type": 1, //type为1表示是转发类型的推文信息
		"postNormDto": null,
		"postRepostDto": {//如果type为1则是在postRepostDto中
			"id": 1890406787639672832,//推文的id
			"originalId": 1890406519032250368,//被转发推文的id
			"originalType": 0,//被转发推文的类型
			"repostBy": 1884990918671466496,//转发人id
			"createTime": "2025-02-14T22:24:35"
		},
		"postQuoteDto": null,
		"postReplyDto": null
	}
}
PostRepost.vue需要根据type去拼接对应的推文组件目前只有type = 0是PostNorm.vue
通过把originalId传给对应的推文组件，渲染出被转发的推文。
然后根据repostBy去获取转发人的信息，并将昵称渲染在左上角和twitter类似xxx转发了
获取推文信息和用户信息的方式可以参考PostNorm.vue
